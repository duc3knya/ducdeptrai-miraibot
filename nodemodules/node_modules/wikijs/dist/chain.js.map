{"version":3,"sources":["../src/chain.js"],"names":["processors","extracts","extract","data","links","map","e","title","extlinks","langlinks","lang","link","url","coordinates","categories","pageimages","image","name","pageimage","thumbnail","original","process","rawPageData","props","reduce","prop","Object","assign","memo","QueryChain","id","apiOptions","_params","pageids","Set","join","args","key","request","then","res","params","query","pages","values","Array","isArray","add","chain","generator","ggsradius","radius","ggscoord","latitude","longitude","list","srsearch","srlimit","limit","explaintext","exintro","piprop","keys","types","filter","k","ellimit","plnamespace","pllimit","lllimit","llprop"],"mappings":"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","file":"chain.js","sourcesContent":["import { api } from './util';\n\nconst processors = {\n\textracts: data => {\n\t\treturn { extract: data.extract };\n\t},\n\tlinks: data => {\n\t\treturn { links: data.links.map(e => e.title) };\n\t},\n\textlinks: data => {\n\t\treturn { extlinks: data.extlinks.map(e => e['*']) };\n\t},\n\tlanglinks: data => {\n\t\treturn {\n\t\t\tlanglinks: data.langlinks.map(link => {\n\t\t\t\treturn {\n\t\t\t\t\tlang: link.lang,\n\t\t\t\t\ttitle: link['*'],\n\t\t\t\t\turl: link.url\n\t\t\t\t};\n\t\t\t})\n\t\t};\n\t},\n\tcoordinates: data => {\n\t\tif (data.coordinates) {\n\t\t\treturn { coordinates: data.coordinates[0] };\n\t\t} else {\n\t\t\treturn {};\n\t\t}\n\t},\n\tcategories: data => {\n\t\treturn { categories: data.categories.map(e => e.title) };\n\t},\n\tpageimages: data => {\n\t\treturn {\n\t\t\timage: {\n\t\t\t\tname: data.pageimage,\n\t\t\t\tthumbnail: data.thumbnail,\n\t\t\t\toriginal: data.original\n\t\t\t}\n\t\t};\n\t}\n};\n\nfunction process(props, rawPageData) {\n\tconst data = { title: rawPageData.title };\n\treturn props.reduce((memo, prop) => {\n\t\tif (processors[prop]) Object.assign(memo, processors[prop](rawPageData));\n\t\treturn memo;\n\t}, data);\n}\n\n/**\n * Chain API requests together\n * @example\n * // Get page summary and images in same request\n * wiki.page('batman').then(page => page.chain().summary().image().request()).then(console.log);\n * @namespace QueryChain\n */\nexport default class QueryChain {\n\tconstructor(apiOptions, id) {\n\t\tthis.id = id;\n\t\tthis.apiOptions = apiOptions;\n\t\tthis._params = { pageids: id };\n\t\tthis.props = new Set();\n\t}\n\n\tparams() {\n\t\tconst prop = [...this.props].join('|');\n\t\treturn Object.assign({}, this._params, { prop });\n\t}\n\n\tdirect(key, ...args) {\n\t\treturn this[key](...args)\n\t\t\t.request()\n\t\t\t.then(res => res[key]);\n\t}\n\n\t// TODO: Add page searches for root calls - generators\n\n\t// TODO: Add pagination helper method\n\n\t/**\n\t * Make combined API request\n\t * @method QueryChain#request\n\t * @returns {Object|Array} - Data object(s) depending on where the chain was created from\n\t */\n\trequest() {\n\t\tconst props = [...this.props];\n\t\treturn api(this.apiOptions, this.params())\n\t\t\t.then(res => {\n\t\t\t\tif (this.id) {\n\t\t\t\t\treturn res.query.pages[this.id];\n\t\t\t\t} else {\n\t\t\t\t\treturn Object.values(res.query.pages);\n\t\t\t\t}\n\t\t\t})\n\t\t\t.then(data => {\n\t\t\t\tif (Array.isArray(data)) {\n\t\t\t\t\treturn data.map(e => process(props, e));\n\t\t\t\t} else {\n\t\t\t\t\treturn process(props, data);\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\tchain(prop, params = {}) {\n\t\tif (prop) {\n\t\t\tthis.props.add(prop);\n\t\t}\n\t\tObject.assign(this._params, params);\n\t\treturn this;\n\t}\n\n\t/**\n\t * @summary Finds pages near a specific point\n\t * @method QueryChain#geosearch\n\t * @returns {QueryChain}\n\t */\n\tgeosearch(latitude, longitude, radius) {\n\t\treturn this.chain(undefined, {\n\t\t\tgenerator: 'geosearch',\n\t\t\tggsradius: radius,\n\t\t\tggscoord: `${latitude}|${longitude}`\n\t\t});\n\t}\n\n\tsearch(query, limit = 50) {\n\t\treturn this.chain(undefined, {\n\t\t\tlist: 'search',\n\t\t\tsrsearch: query,\n\t\t\tsrlimit: limit\n\t\t});\n\t}\n\n\t/**\n\t * @summary Useful for extracting structured section content\n\t * @method QueryChain#content\n\t * @returns {QueryChain}\n\t */\n\tcontent() {\n\t\treturn this.chain('extracts', {\n\t\t\texplaintext: '1'\n\t\t});\n\t}\n\n\t/**\n\t * @summary Useful for extracting summary content\n\t * @method QueryChain#summary\n\t * @returns {QueryChain}\n\t */\n\tsummary() {\n\t\treturn this.chain('extracts', {\n\t\t\texplaintext: '1',\n\t\t\texintro: '1'\n\t\t});\n\t}\n\n\t/**\n\t * @summary Extract image\n\t * @method QueryChain#image\n\t * @returns {QueryChain}\n\t */\n\timage(types = { thumbnail: true, original: false, name: true }) {\n\t\treturn this.chain('pageimages', {\n\t\t\tpiprop: Object.keys(types)\n\t\t\t\t.filter(k => types[k])\n\t\t\t\t.join('|')\n\t\t});\n\t}\n\n\t/**\n\t * @summary Extract external links\n\t * @method QueryChain#extlinks\n\t * @returns {QueryChain}\n\t */\n\textlinks() {\n\t\treturn this.chain('extlinks', {\n\t\t\tellimit: 'max'\n\t\t});\n\t}\n\n\t/**\n\t * @summary Extract page links\n\t * @method QueryChain#links\n\t * @returns {QueryChain}\n\t */\n\tlinks(limit = 100) {\n\t\treturn this.chain('links', {\n\t\t\tplnamespace: 0,\n\t\t\tpllimit: limit\n\t\t});\n\t}\n\n\t/**\n\t * @summary Extract categories\n\t * @method QueryChain#categories\n\t * @returns {QueryChain}\n\t */\n\tcategories(limit = 100) {\n\t\treturn this.chain('categories', {\n\t\t\tpllimit: limit\n\t\t});\n\t}\n\n\t/**\n\t * @summary Extract coordinates\n\t * @method QueryChain#coordinates\n\t * @returns {QueryChain}\n\t */\n\tcoordinates() {\n\t\treturn this.chain('coordinates');\n\t}\n\n\t/**\n\t * @summary Get list of links to different translations\n\t * @method QueryChain#langlinks\n\t * @returns {QueryChain}\n\t */\n\tlanglinks() {\n\t\treturn this.chain('langlinks', {\n\t\t\tlllimit: 'max',\n\t\t\tllprop: 'url'\n\t\t});\n\t}\n}\n"]}