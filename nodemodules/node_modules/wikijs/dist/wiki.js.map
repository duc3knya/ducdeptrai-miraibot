{"version":3,"sources":["../src/wiki.js"],"names":["wiki","defaultOptions","apiUrl","origin","res","query","redirects","length","apiOptions","prop","inprop","ppprop","titles","to","list","srsearch","srlimit","limit","search","map","all","article","title","catch","message","opensearch","err","namespace","action","then","handleRedirect","Object","keys","pages","id","Error","console","log","assign","options","random","rnnamespace","rnlimit","page","geoSearch","gsradius","radius","gscoord","lat","lon","gslimit","geosearch","findById","pageids","pageid","find","results","predicate","name","allPages","allCategories","pagesInCategory","cmtitle","category","prefixSearch","pslimit","psprofile","pssearch","prefixsearch","mostViewed","mostviewed","count","api","params","chain","QueryChain"],"mappings":"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","file":"wiki.js","sourcesContent":["'use strict';\n\nimport { pagination, api, aggregate } from './util';\nimport wikiPage from './page';\nimport QueryChain from './chain';\n\n/**\n * @namespace\n * @constant\n * @property {string} apiUrl - URL of Wikipedia API\n * @property {string} headers - Headers to pass through to the API request\n * @property {string} origin - When accessing the API using a cross-domain AJAX\n * request (CORS), set this to the originating domain. This must be included in\n * any pre-flight request, and therefore must be part of the request URI (not\n * the POST body). This must match one of the origins in the Origin header\n * exactly, so it has to be set to something like https://en.wikipedia.org or\n * https://meta.wikimedia.org. If this parameter does not match the Origin\n * header, a 403 response will be returned. If this parameter matches the Origin\n * header and the origin is whitelisted, an Access-Control-Allow-Origin header\n * will be set.\n */\nconst defaultOptions = {\n\tapiUrl: 'http://en.wikipedia.org/w/api.php',\n\torigin: '*'\n};\n\n/**\n * wiki\n * @example\n * wiki({ apiUrl: 'http://fr.wikipedia.org/w/api.php' }).search(...);\n * @namespace Wiki\n * @param  {Object} options\n * @return {Object} - wiki (for chaining methods)\n */\nexport default function wiki(options = {}) {\n\tif (this instanceof wiki) {\n\t\t// eslint-disable-next-line\n\t\tconsole.log(\n\t\t\t'Please do not use wikijs ^1.0.0 as a class. Please see the new README.'\n\t\t);\n\t}\n\n\tconst apiOptions = Object.assign({}, defaultOptions, options);\n\n\tfunction handleRedirect(res) {\n\t\tif (res.query.redirects && res.query.redirects.length === 1) {\n\t\t\treturn api(apiOptions, {\n\t\t\t\tprop: 'info|pageprops',\n\t\t\t\tinprop: 'url',\n\t\t\t\tppprop: 'disambiguation',\n\t\t\t\ttitles: res.query.redirects[0].to\n\t\t\t});\n\t\t}\n\t\treturn res;\n\t}\n\n\t/**\n\t * Search articles\n\t * @example\n\t * wiki.search('star wars').then(data => console.log(data.results.length));\n\t * @example\n\t * wiki.search('star wars').then(data => {\n\t * \tdata.next().then(...);\n\t * });\n\t * @method Wiki#search\n\t * @param  {string} query - keyword query\n\t * @param  {Number} [limit] - limits the number of results\n\t * @param  {Boolean} [all] - returns entire article objects instead of just titles\n\t * @return {Promise} - pagination promise with results and next page function\n\t */\n\tfunction search(query, limit = 50, all = false) {\n\t\treturn pagination(\n\t\t\tapiOptions,\n\t\t\t{\n\t\t\t\tlist: 'search',\n\t\t\t\tsrsearch: query,\n\t\t\t\tsrlimit: limit\n\t\t\t},\n\t\t\tres =>\n\t\t\t\tres.query.search.map(article => {\n\t\t\t\t\treturn all ? article : article.title;\n\t\t\t\t})\n\t\t).catch(err => {\n\t\t\tif (err.message === '\"text\" search is disabled.') {\n\t\t\t\t// Try backup search method\n\t\t\t\treturn opensearch(query, limit);\n\t\t\t}\n\t\t\tthrow err;\n\t\t});\n\t}\n\n\t/**\n\t * Search articles using \"fuzzy\" prefixsearch\n\t * @example\n\t * wiki.prefixSearch('star wars').then(data => console.log(data.results.length));\n\t * @example\n\t * wiki.prefixSearch('star wars').then(data => {\n\t * \tdata.next().then(...);\n\t * });\n\t * @method Wiki#prefixSearch\n\t * @param  {string} query - keyword query\n\t * @param  {Number} [limit] - limits the number of results\n\t * @return {Promise} - pagination promise with results and next page function\n\t */\n\tfunction prefixSearch(query, limit = 50) {\n\t\treturn pagination(\n\t\t\tapiOptions,\n\t\t\t{\n\t\t\t\tlist: 'prefixsearch',\n\t\t\t\tpslimit: limit,\n\t\t\t\tpsprofile: 'fuzzy',\n\t\t\t\tpssearch: query\n\t\t\t},\n\t\t\tres => res.query.prefixsearch.map(article => article.title)\n\t\t);\n\t}\n\n\t/**\n\t * Opensearch (mainly used as a backup to normal text search)\n\t * @param  {string} query - keyword query\n\t * @param  {Number} limit - limits the number of results\n\t * @return {Array}       List of page title results\n\t */\n\tfunction opensearch(query, limit = 50) {\n\t\treturn api(apiOptions, {\n\t\t\tsearch: query,\n\t\t\tlimit,\n\t\t\tnamespace: 0,\n\t\t\taction: 'opensearch',\n\t\t\tredirects: undefined\n\t\t}).then(res => res[1]);\n\t}\n\n\t/**\n\t * Random articles\n\t * @example\n\t * wiki.random(3).then(results => console.log(results[0]));\n\t * @method Wiki#random\n\t * @param  {Number} [limit] - limits the number of random articles\n\t * @return {Promise} - List of page titles\n\t */\n\tfunction random(limit = 1) {\n\t\treturn api(apiOptions, {\n\t\t\tlist: 'random',\n\t\t\trnnamespace: 0,\n\t\t\trnlimit: limit\n\t\t}).then(res => res.query.random.map(article => article.title));\n\t}\n\n\t/**\n\t * Get Page\n\t * @example\n\t * wiki.page('Batman').then(page => console.log(page.pageid));\n\t * @method Wiki#page\n\t * @param  {string} title - title of article\n\t * @return {Promise}\n\t */\n\tfunction page(title) {\n\t\treturn api(apiOptions, {\n\t\t\tprop: 'info|pageprops',\n\t\t\tinprop: 'url',\n\t\t\tppprop: 'disambiguation',\n\t\t\ttitles: title\n\t\t})\n\t\t\t.then(handleRedirect)\n\t\t\t.then(res => {\n\t\t\t\tconst id = Object.keys(res.query.pages)[0];\n\t\t\t\tif (!id || id === '-1') {\n\t\t\t\t\tthrow new Error('No article found');\n\t\t\t\t}\n\t\t\t\treturn wikiPage(res.query.pages[id], apiOptions);\n\t\t\t});\n\t}\n\n\t/**\n\t * Get Page by PageId\n\t * @example\n\t * wiki.findById(4335).then(page => console.log(page.title));\n\t * @method Wiki#findById\n\t * @param {integer} pageid, id of the page\n\t * @return {Promise}\n\t */\n\tfunction findById(pageid) {\n\t\treturn api(apiOptions, {\n\t\t\tprop: 'info|pageprops',\n\t\t\tinprop: 'url',\n\t\t\tppprop: 'disambiguation',\n\t\t\tpageids: pageid\n\t\t})\n\t\t\t.then(handleRedirect)\n\t\t\t.then(res => {\n\t\t\t\tconst id = Object.keys(res.query.pages)[0];\n\t\t\t\tif (!id || id === '-1') {\n\t\t\t\t\tthrow new Error('No article found');\n\t\t\t\t}\n\t\t\t\treturn wikiPage(res.query.pages[id], apiOptions);\n\t\t\t});\n\t}\n\n\t/**\n\t * Find page by query and optional predicate\n\t * @example\n\t * wiki.find('luke skywalker').then(page => console.log(page.title));\n\t * @method Wiki#find\n\t * @param {string} search query\n\t * @param {function} [predicate] - testing function for choosing which page result to fetch. Default is first result.\n\t * @return {Promise}\n\t */\n\tfunction find(query, predicate = results => results[0]) {\n\t\treturn search(query)\n\t\t\t.then(res => predicate(res.results))\n\t\t\t.then(name => page(name));\n\t}\n\n\t/**\n\t * Geographical Search\n\t * @example\n\t * wiki.geoSearch(32.329, -96.136).then(titles => console.log(titles.length));\n\t * @method Wiki#geoSearch\n\t * @param  {Number} lat - latitude\n\t * @param  {Number} lon - longitude\n\t * @param  {Number} [radius=1000] - search radius in meters (default: 1km)\n\t * @param  {Number} [limit=10] - number of results (default: 10 results)\n\t * @return {Promise} - List of page titles\n\t */\n\tfunction geoSearch(lat, lon, radius = 1000, limit = 10) {\n\t\treturn api(apiOptions, {\n\t\t\tlist: 'geosearch',\n\t\t\tgsradius: radius,\n\t\t\tgscoord: `${lat}|${lon}`,\n\t\t\tgslimit: limit\n\t\t}).then(res => res.query.geosearch.map(article => article.title));\n\t}\n\n\t/**\n\t * @summary Find the most viewed pages with counts\n\t * @example\n\t * wiki.mostViewed().then(list => console.log(`${list[0].title}: ${list[0].count}`))\n\t * @method Wiki#mostViewed\n\t * @returns {Promise} - Array of {title,count}\n\t */\n\tfunction mostViewed() {\n\t\treturn api(apiOptions, {\n\t\t\tlist: 'mostviewed'\n\t\t}).then(res => {\n\t\t\treturn res.query.mostviewed.map(({ title, count }) => ({ title, count }));\n\t\t});\n\t}\n\n\t/**\n\t * Fetch all page titles in wiki\n\t * @method Wiki#allPages\n\t * @return {Array} Array of pages\n\t */\n\tfunction allPages() {\n\t\treturn aggregate(apiOptions, {}, 'allpages', 'title', 'ap');\n\t}\n\n\t/**\n\t * Fetch all categories in wiki\n\t * @method Wiki#allCategories\n\t * @return {Array} Array of categories\n\t */\n\tfunction allCategories() {\n\t\treturn aggregate(apiOptions, {}, 'allcategories', '*', 'ac');\n\t}\n\n\t/**\n\t * Fetch all pages in category\n\t * @method Wiki#pagesInCategory\n\t * @param  {String} category Category to fetch from\n\t * @return {Array} Array of pages\n\t */\n\tfunction pagesInCategory(category) {\n\t\treturn aggregate(\n\t\t\tapiOptions,\n\t\t\t{\n\t\t\t\tcmtitle: category\n\t\t\t},\n\t\t\t'categorymembers',\n\t\t\t'title',\n\t\t\t'cm'\n\t\t);\n\t}\n\n\t/**\n\t * @summary Helper function to query API directly\n\t * @method Wiki#api\n\t * @param {Object} params [https://www.mediawiki.org/wiki/API:Query](https://www.mediawiki.org/wiki/API:Query)\n\t * @returns {Promise} Query Response\n\t * @example\n\t * wiki().api({\n\t *\taction: 'parse',\n\t *\tpage: 'Pet_door'\n\t * }).then(res => res.parse.title.should.equal('Pet door'));\n\t */\n\tfunction rawApi(params) {\n\t\treturn api(apiOptions, params);\n\t}\n\n\t/**\n\t * @summary Returns a QueryChain to efficiently query specific data\n\t * @method Wiki#chain\n\t * @returns {QueryChain}\n\t * @example\n\t * // Find summaries and images of places near a specific location\n\t * wiki()\n\t *\t.chain()\n\t *\t.geosearch(52.52437, 13.41053)\n\t *\t.summary()\n\t *\t.image()\n\t *\t.coordinates()\n\t *\t.request()\n\t */\n\tfunction chain() {\n\t\treturn new QueryChain(apiOptions);\n\t}\n\n\treturn {\n\t\tsearch,\n\t\trandom,\n\t\tpage,\n\t\tgeoSearch,\n\t\toptions,\n\t\tfindById,\n\t\tfind,\n\t\tallPages,\n\t\tallCategories,\n\t\tpagesInCategory,\n\t\topensearch,\n\t\tprefixSearch,\n\t\tmostViewed,\n\t\tapi: rawApi,\n\t\tchain\n\t};\n}\n"]}