{"version":3,"sources":["../src/page.js"],"names":["wikiPage","get","rest","obj","first","firstValue","Object","keys","getFileName","Array","isArray","text","indexOf","split","name","apiOptions","prop","rvprop","rvlimit","rvparse","titles","raw","title","then","res","query","pages","pageid","revisions","rawContent","parseContent","chain","content","request","extract","image","original","generator","gimlimit","iiprop","map","id","node","attributes","some","key","value","className","nodeType","predicate","children","findNode","child","found","nodes","push","findNodes","rvsection","rawInfo","wikitext","parser","general","info","length","toLowerCase","_wikitext","metadata","hasOwnProperty","QueryChain","rawPageInfo","assign","page","html","sections","summary","images","rawImages","imageinfo","reduce","imageInfos","list","url","references","inputHTML","tokens","ast","isTag","hasName","hasClass","refs","ref","filter","el","items","item","span","cite","find","links","linkAttr","plnamespace","pllimit","limit","link","aggregated","_pagination","externalLinks","direct","categories","params","category","coordinates","coords","data","backlinks","bllimit","bltitle","mainImage","Promise","all","bildname","imagen","Immagine","badge","logo","mainImageName","sort","b","a","pageImage","fallback","filename","toUpperCase","replace","langlinks","fullInfo","tables","canonicalurl"],"mappings":"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","file":"page.js","sourcesContent":["import { aggregatePagination, pagination, api, parseContent } from './util';\nimport infoboxParser from 'infobox-parser';\nimport { tokenize, constructTree } from 'hyntax';\nimport { parseCoordinates } from './coordinates';\nimport QueryChain from './chain';\n\nconst get = (obj, first, ...rest) => {\n\tif (obj === undefined || first === undefined) return obj;\n\tif (typeof first === 'function') {\n\t\treturn get(first(obj), ...rest);\n\t}\n\treturn get(obj[first], ...rest);\n};\n\nconst firstValue = obj => {\n\tif (typeof obj === 'object') return obj[Object.keys(obj)[0]];\n\treturn obj[0];\n};\n\nconst getFileName = text => {\n\tif (Array.isArray(text)) text = text[0];\n\tif (!text) return undefined;\n\tif (text.indexOf(':') !== -1) {\n\t\tconst [, name] = text.split(':');\n\t\treturn name;\n\t}\n\treturn text;\n};\n\n/**\n * WikiPage\n * @namespace WikiPage\n */\nexport default function wikiPage(rawPageInfo, apiOptions) {\n\tconst raw = rawPageInfo;\n\n\t/**\n\t * HTML from page\n\t * @example\n\t * wiki.page('batman').then(page => page.html()).then(console.log);\n\t * @method WikiPage#html\n\t * @return {Promise}\n\t */\n\tfunction html() {\n\t\treturn api(apiOptions, {\n\t\t\tprop: 'revisions',\n\t\t\trvprop: 'content',\n\t\t\trvlimit: 1,\n\t\t\trvparse: '',\n\t\t\ttitles: raw.title\n\t\t}).then(res => res.query.pages[raw.pageid].revisions[0]['*']);\n\t}\n\n\t/**\n\t * @summary Useful for extracting structured section content from the page\n\t * @alias sections\n\t * @example\n\t * wiki.page('batman').then(page => page.content()).then(console.log);\n\t * @method WikiPage#content\n\t * @return {Promise}\n\t */\n\tfunction content() {\n\t\treturn rawContent().then(parseContent);\n\t}\n\n\t/**\n\t * Raw content from page\n\t * @example\n\t * wiki.page('batman').then(page => page.rawContent()).then(console.log);\n\t * @method WikiPage#rawContent\n\t * @return {Promise}\n\t */\n\tfunction rawContent() {\n\t\treturn chain()\n\t\t\t.content()\n\t\t\t.request()\n\t\t\t.then(res => res.extract);\n\t}\n\n\t/**\n\t * Text summary from page\n\t * @example\n\t * wiki.page('batman').then(page => page.summary()).then(console.log);\n\t * @method WikiPage#summary\n\t * @return {Promise}\n\t */\n\tfunction summary() {\n\t\treturn chain()\n\t\t\t.summary()\n\t\t\t.request()\n\t\t\t.then(res => res.extract);\n\t}\n\n\t/**\n\t * Main page image directly from API\n\t * @method WikiPage#pageImage\n\t * @returns URL\n\t */\n\tfunction pageImage() {\n\t\treturn chain()\n\t\t\t.image({ original: true, name: true })\n\t\t\t.request()\n\t\t\t.then(res => get(res, 'image', 'original', 'source'));\n\t}\n\n\t/**\n\t * Raw data from images from page\n\t * @example\n\t * wiki.page('batman').then(page => page.rawImages()).then(console.log);\n\t * @method WikiPage#rawImages\n\t * @return {Promise}\n\t */\n\tfunction rawImages() {\n\t\treturn api(apiOptions, {\n\t\t\tgenerator: 'images',\n\t\t\tgimlimit: 'max',\n\t\t\tprop: 'imageinfo',\n\t\t\tiiprop: 'url',\n\t\t\ttitles: raw.title\n\t\t}).then(res => {\n\t\t\tif (res.query) {\n\t\t\t\treturn Object.keys(res.query.pages).map(id => res.query.pages[id]);\n\t\t\t}\n\t\t\treturn [];\n\t\t});\n\t}\n\n\t/**\n\t * Main image URL from infobox on page\n\t * @example\n\t * wiki.page('batman').then(page => page.mainImage()).then(console.log);\n\t * @method WikiPage#mainImage\n\t * @return {Promise}\n\t */\n\tfunction mainImage() {\n\t\treturn Promise.all([rawImages(), info()]).then(([images, info]) => {\n\t\t\t// Handle different translations of \"image\" here\n\t\t\tconst mainImageName = getFileName(\n\t\t\t\tinfo.image ||\n\t\t\t\t\tinfo.bildname ||\n\t\t\t\t\tinfo.imagen ||\n\t\t\t\t\tinfo.Immagine ||\n\t\t\t\t\tinfo.badge ||\n\t\t\t\t\tinfo.logo\n\t\t\t);\n\t\t\t// Handle case where no info box exists\n\t\t\tif (!mainImageName) {\n\t\t\t\treturn rawInfo().then(text => {\n\t\t\t\t\tif (!images.length) return undefined;\n\t\t\t\t\t// Sort images by what is seen first in page's info text\n\t\t\t\t\timages.sort((a, b) => text.indexOf(b.title) - text.indexOf(a.title));\n\t\t\t\t\tconst image = images[0];\n\n\t\t\t\t\tconst fallback =\n\t\t\t\t\t\timage && image.imageinfo.length > 0\n\t\t\t\t\t\t\t? image.imageinfo[0].url\n\t\t\t\t\t\t\t: undefined;\n\n\t\t\t\t\t// If no image could be found, fallback to page image api result\n\t\t\t\t\treturn pageImage().then(url => url || fallback);\n\t\t\t\t});\n\t\t\t}\n\t\t\tconst image = images.find(({ title }) => {\n\t\t\t\tconst filename = getFileName(title);\n\t\t\t\t// Some wikis use underscores for spaces, some don't\n\t\t\t\treturn (\n\t\t\t\t\tfilename.toUpperCase() === mainImageName.toUpperCase() ||\n\t\t\t\t\tfilename.replace(/\\s/g, '_') === mainImageName\n\t\t\t\t);\n\t\t\t});\n\n\t\t\tconst fallback =\n\t\t\t\timage && image.imageinfo.length > 0\n\t\t\t\t\t? image.imageinfo[0].url\n\t\t\t\t\t: undefined;\n\n\t\t\t// If no image could be found, fallback to page image api result\n\t\t\treturn pageImage().then(url => url || fallback);\n\t\t});\n\t}\n\n\t/**\n\t * Image URL's from page\n\t * @example\n\t * wiki.page('batman').then(page => page.image()).then(console.log);\n\t * @method WikiPage#images\n\t * @return {Promise}\n\t */\n\tfunction images() {\n\t\treturn rawImages().then(images => {\n\t\t\treturn images\n\t\t\t\t.map(image => image.imageinfo)\n\t\t\t\t.reduce((imageInfos, list) => [...imageInfos, ...list], [])\n\t\t\t\t.map(info => info.url);\n\t\t});\n\t}\n\n\t/**\n\t * External links from page\n\t * @example\n\t * wiki().page('batman').then(page => page.externalLinks()).then(console.log);\n\t * // or\n\t * wiki().chain().search('batman').extlinks().request()\n\t * @method WikiPage#externalLinks\n\t * @return {Promise}\n\t */\n\tfunction externalLinks() {\n\t\treturn chain().direct('extlinks');\n\t}\n\n\tfunction hasClass(node, className) {\n\t\treturn (\n\t\t\tnode.content.attributes &&\n\t\t\tnode.content.attributes.some(\n\t\t\t\tattr =>\n\t\t\t\t\tattr.key.content === 'class' &&\n\t\t\t\t\tattr.value.content.indexOf(className) !== -1\n\t\t\t)\n\t\t);\n\t}\n\n\tfunction isTag(node) {\n\t\treturn node.nodeType === 'tag';\n\t}\n\n\tfunction hasName(node, name) {\n\t\treturn node.content.name === name;\n\t}\n\n\tfunction findNode(node, predicate) {\n\t\tif (predicate(node)) return node;\n\t\t// search through children as well\n\t\tif (node.content.children) {\n\t\t\tfor (let child of node.content.children) {\n\t\t\t\tconst found = findNode(child, predicate);\n\t\t\t\tif (found) {\n\t\t\t\t\treturn found;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tfunction findNodes(node, predicate, nodes) {\n\t\tif (predicate(node)) {\n\t\t\tnodes.push(node);\n\t\t}\n\t\tif (node.content.children) {\n\t\t\tfor (let child of node.content.children) {\n\t\t\t\tfindNodes(child, predicate, nodes);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * References from page\n\t * @example\n\t * wiki().page('batman').then(page => page.references()).then(console.log);\n\t * @method WikiPage#references\n\t * @return {Promise}\n\t */\n\tfunction references() {\n\t\treturn html()\n\t\t\t.then(inputHTML => {\n\t\t\t\tconst { tokens } = tokenize(inputHTML);\n\t\t\t\tconst { ast } = constructTree(tokens);\n\t\t\t\treturn ast;\n\t\t\t})\n\t\t\t.then(ast => {\n\t\t\t\tconst links = [];\n\t\t\t\tconst refs = [];\n\t\t\t\t// There can be mulitple reference sections\n\t\t\t\tfindNodes(\n\t\t\t\t\tast,\n\t\t\t\t\tnode =>\n\t\t\t\t\t\tisTag(node) && hasName(node, 'ol') && hasClass(node, 'references'),\n\t\t\t\t\trefs\n\t\t\t\t);\n\t\t\t\tfor (let ref of refs) {\n\t\t\t\t\tconst items = ref.content.children.filter(\n\t\t\t\t\t\tel => isTag(el) && hasName(el, 'li') && el.content.children\n\t\t\t\t\t);\n\t\t\t\t\tfor (let item of items) {\n\t\t\t\t\t\t// The reference was moved under a span under li\n\t\t\t\t\t\tconst span = item.content.children[2];\n\t\t\t\t\t\tconst cite = findNode(\n\t\t\t\t\t\t\tspan,\n\t\t\t\t\t\t\tnode => isTag(node) && hasName(node, 'cite')\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (cite) {\n\t\t\t\t\t\t\tfor (let el of cite.content.children) {\n\t\t\t\t\t\t\t\tif (isTag(el) && hasName(el, 'a') && hasClass(el, 'external')) {\n\t\t\t\t\t\t\t\t\tconst linkAttr = el.content.attributes.find(\n\t\t\t\t\t\t\t\t\t\tattr => attr.key.content === 'href'\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\tlinks.push(linkAttr.value.content);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn links;\n\t\t\t});\n\t}\n\n\t/**\n\t * Paginated links from page\n\t * @example\n\t * wiki().page('batman').then(page => page.links()).then(console.log);\n\t * @method WikiPage#links\n\t * @param  {Boolean} [aggregated] - return all links (default is true)\n\t * @param  {Number} [limit] - number of links per page\n\t * @return {Promise} - returns results if aggregated [and next function for more results if not aggregated]\n\t */\n\tfunction links(aggregated = true, limit = 100) {\n\t\tconst _pagination = pagination(\n\t\t\tapiOptions,\n\t\t\t{\n\t\t\t\tprop: 'links',\n\t\t\t\tplnamespace: 0,\n\t\t\t\tpllimit: limit,\n\t\t\t\ttitles: raw.title\n\t\t\t},\n\t\t\tres => (res.query.pages[raw.pageid].links || []).map(link => link.title)\n\t\t);\n\t\tif (aggregated) {\n\t\t\treturn aggregatePagination(_pagination);\n\t\t}\n\t\treturn _pagination;\n\t}\n\n\t/**\n\t * Paginated categories from page\n\t * @example\n\t * wiki().page('batman').then(page => page.categories()).then(console.log);\n\t * @method WikiPage#categories\n\t * @param  {Boolean} [aggregated] - return all categories (default is true)\n\t * @param  {Number} [limit] - number of categories per page\n\t * @return {Promise} - returns results if aggregated [and next function for more results if not aggregated]\n\t */\n\tfunction categories(aggregated = true, limit = 100) {\n\t\tconst _pagination = pagination(\n\t\t\tapiOptions,\n\t\t\tchain()\n\t\t\t\t.categories(limit)\n\t\t\t\t.params(),\n\t\t\tres =>\n\t\t\t\t(res.query.pages[raw.pageid].categories || []).map(\n\t\t\t\t\tcategory => category.title\n\t\t\t\t)\n\t\t);\n\t\tif (aggregated) {\n\t\t\treturn aggregatePagination(_pagination);\n\t\t}\n\t\treturn _pagination;\n\t}\n\n\t/**\n\t * Geographical coordinates from page\n\t * @example\n\t * wiki().page('Texas').then(texas => texas.coordinates())\n\t * @method WikiPage#coordinates\n\t * @return {Promise}\n\t */\n\tfunction coordinates() {\n\t\treturn chain()\n\t\t\t.direct('coordinates')\n\t\t\t.then(coords => {\n\t\t\t\tif (coords) return coords;\n\t\t\t\t// No coordinates for this page, check infobox for deprecated version\n\t\t\t\treturn info().then(data => parseCoordinates(data));\n\t\t\t});\n\t}\n\n\tfunction rawInfo(title) {\n\t\treturn api(apiOptions, {\n\t\t\tprop: 'revisions',\n\t\t\trvprop: 'content',\n\t\t\trvsection: 0,\n\t\t\ttitles: title || raw.title\n\t\t}).then(res => get(res, 'query', 'pages', firstValue, 'revisions', 0, '*'));\n\t}\n\n\t/**\n\t * Fetch and parse tables within page\n\t * @method WikiPage#tables\n\t * @return {Promise} Resolves to a collection of tables\n\t */\n\tfunction tables() {\n\t\treturn api(apiOptions, {\n\t\t\tprop: 'revisions',\n\t\t\trvprop: 'content',\n\t\t\ttitles: raw.title\n\t\t})\n\t\t\t.then(res => get(res, 'query', 'pages', firstValue, 'revisions', 0, '*'))\n\t\t\t.then(wikitext => infoboxParser(wikitext, apiOptions.parser).tables);\n\t}\n\n\t/**\n\t * Get general information from page, with optional specifc property\n\t * @deprecated This method will be dropped and replaced with the `fullInfo` implementation in v5\n\t * @example\n\t * wiki().page('Batman').then(page => page.info('alter_ego'));\n\t * @method WikiPage#info\n\t * @param  {String} [key] - Information key. Falsy keys are ignored\n\t * @return {Promise} - info Object contains key/value pairs of infobox data, or specific value if key given\n\t */\n\tfunction info(key) {\n\t\treturn rawInfo()\n\t\t\t.then(wikitext => {\n\t\t\t\t// Use general data for now...\n\t\t\t\tconst info = infoboxParser(wikitext, apiOptions.parser).general;\n\t\t\t\tif (Object.keys(info).length === 0) {\n\t\t\t\t\t// If empty, check to see if this page has a templated infobox\n\t\t\t\t\treturn rawInfo(`Template:Infobox ${raw.title.toLowerCase()}`).then(\n\t\t\t\t\t\t_wikitext =>\n\t\t\t\t\t\t\tinfoboxParser(_wikitext || '', apiOptions.parser).general\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\treturn info;\n\t\t\t})\n\t\t\t.then(metadata => {\n\t\t\t\tif (!key) {\n\t\t\t\t\treturn metadata;\n\t\t\t\t}\n\t\t\t\tif (metadata.hasOwnProperty(key)) {\n\t\t\t\t\treturn metadata[key];\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\t/**\n\t * Get the full infobox data, parsed in a easy to use manner\n\t * @example\n\t * new Wiki().page('Batman').then(page => page.fullInfo()).then(info => info.general.aliases);\n\t * @method WikiPage#fullInfo\n\t * @return {Promise} - Parsed object of all infobox data\n\t */\n\tfunction fullInfo() {\n\t\treturn rawInfo().then(wikitext =>\n\t\t\tinfoboxParser(wikitext, apiOptions.parser)\n\t\t);\n\t}\n\n\t/**\n\t * Paginated backlinks from page\n\t * @method WikiPage#backlinks\n\t * @param  {Boolean} [aggregated] - return all backlinks (default is true)\n\t * @param  {Number} [limit] - number of backlinks per page\n\t * @return {Promise} - includes results [and next function for more results if not aggregated]\n\t */\n\tfunction backlinks(aggregated = true, limit = 100) {\n\t\tconst _pagination = pagination(\n\t\t\tapiOptions,\n\t\t\t{\n\t\t\t\tlist: 'backlinks',\n\t\t\t\tbllimit: limit,\n\t\t\t\tbltitle: raw.title\n\t\t\t},\n\t\t\tres => (res.query.backlinks || []).map(link => link.title)\n\t\t);\n\t\tif (aggregated) {\n\t\t\treturn aggregatePagination(_pagination);\n\t\t}\n\t\treturn _pagination;\n\t}\n\n\t/**\n\t * Get list of links to different translations\n\t * @method WikiPage#langlinks\n\t * @return {Promise} - includes link objects { lang, title, url }\n\t */\n\tfunction langlinks() {\n\t\treturn chain().direct('langlinks');\n\t}\n\n\t/**\n\t * Get URL for wiki page\n\t * @method WikiPage#url\n\t * @return {String}\n\t */\n\tfunction url() {\n\t\treturn raw.canonicalurl;\n\t}\n\n\tconst page = Object.assign({}, raw);\n\n\t/**\n\t * Returns a QueryChain for the page\n\t * @method WikiPage#chain\n\t * @returns {QueryChain}\n\t */\n\tfunction chain() {\n\t\treturn new QueryChain(apiOptions, raw.pageid);\n\t}\n\n\tObject.assign(page, {\n\t\traw,\n\t\thtml,\n\t\trawContent,\n\t\tcontent,\n\t\tsections: content,\n\t\tsummary,\n\t\timages,\n\t\treferences,\n\t\tlinks,\n\t\texternalLinks,\n\t\tcategories,\n\t\tcoordinates,\n\t\tinfo,\n\t\tbacklinks,\n\t\trawImages,\n\t\tmainImage,\n\t\tlanglinks,\n\t\trawInfo,\n\t\tfullInfo,\n\t\tpageImage,\n\t\ttables,\n\t\turl,\n\t\tchain\n\t});\n\n\treturn page;\n}\n"]}